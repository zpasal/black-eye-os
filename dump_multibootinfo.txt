	rbx = TO_VMA_U64(rbx);
	unsigned size;
	size = *(unsigned *)rbx;
	printf ("Announced mbi size 0x%x\n", size);
	__UN__ struct multiboot_tag *tag;
	for (tag = (struct multiboot_tag *) (rbx + 8);
		tag->type != MULTIBOOT_TAG_TYPE_END;
		tag = (struct multiboot_tag *) ((multiboot_uint8_t *) tag + ((tag->size + 7) & ~7)))
	{
			//printf ("XXTag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
		{
		case MULTIBOOT_TAG_TYPE_ELF_SECTIONS:
		{
			__UN__ struct multiboot_tag_elf_sections *sec = ((struct multiboot_tag_elf_sections *) tag);
			printf("%i %i %i %i %i %s\n", sec->type, sec->size, sec->num, sec->entsize, sec->shndx, sec->sections);			
			
			//dump_bytes(sec->sections, 160);

			Elf64_Shdr* s = (Elf64_Shdr*)sec->sections;
			uint64_t max = 0;
			for (uint32_t i=0; i<sec->num; i++, s++) {
				printf("s %i %i %p %X\n", s->sh_name, s->sh_type, s->sh_addr, s->sh_size);

				uint64_t addr = s->sh_addr + s->sh_size;
				if (addr < KERNEL_START_MEMORY) {
					addr += KERNEL_START_MEMORY ;
				}
				if (max < addr) {
					max = addr;
				}
			}
			printf("End of kernel @ %X\n", max);
			break;
		}
		// case MULTIBOOT_TAG_TYPE_CMDLINE:
		// 	printf ("Command line = %s\n", ((struct multiboot_tag_string *) tag)->string);
		// 	break;
		// case MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME:
		// 	printf ("Boot loader name = %s\n",((struct multiboot_tag_string *) tag)->string);
		// 	break;
		// case MULTIBOOT_TAG_TYPE_MODULE:
		// 	printf ("Module at 0x%x-0x%x. Command line %s\n",
		// 		((struct multiboot_tag_module *) tag)->mod_start,
		// 		((struct multiboot_tag_module *) tag)->mod_end,
		// 		((struct multiboot_tag_module *) tag)->cmdline);
		// 	break;
		// case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
		// 	printf ("mem_lower = %uKB, mem_upper = %uKB\n",
		// 	((struct multiboot_tag_basic_meminfo *) tag)->mem_lower,
		// 	((struct multiboot_tag_basic_meminfo *) tag)->mem_upper);
		// 	break;
		// case MULTIBOOT_TAG_TYPE_BOOTDEV:
		// 	printf ("Boot device 0x%x,%u,%u\n",
		// 	((struct multiboot_tag_bootdev *) tag)->biosdev,
		// 	((struct multiboot_tag_bootdev *) tag)->slice,
		// 	((struct multiboot_tag_bootdev *) tag)->part);
		// 	break;

		// case MULTIBOOT_TAG_TYPE_MMAP:
		// 	{
		// 	multiboot_memory_map_t *mmap;
		// 		printf ("mmap\n");
		// 		for (mmap = ((struct multiboot_tag_mmap *) tag)->entries;
		// 			(multiboot_uint8_t *) mmap < (multiboot_uint8_t *) tag + tag->size;
		// 			mmap = (multiboot_memory_map_t *)((unsigned long) mmap + ((struct multiboot_tag_mmap *) tag)->entry_size)) {
		
		// 			printf (" base_addr = 0x%x%x,"
		// 				" length = 0x%x%x, type = 0x%x\n",
		// 				(unsigned) (mmap->addr >> 32),
		// 				(unsigned) (mmap->addr & 0xffffffff),
		// 				(unsigned) (mmap->len >> 32),
		// 				(unsigned) (mmap->len & 0xffffffff),
		// 				(unsigned) mmap->type);
		// 		}
		// 	}
		}
	}

