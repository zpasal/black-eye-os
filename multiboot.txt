
bool multiboot_is_valid(unsigned long magic, unsigned long addr) {
  if (magic != MULTIBOOT2_MAGIC_VALUE) {
    kprintf("Invalid magic value: 0x%x", magic);
    return false;
  }

  if (addr & 7) {
    kprintf("Unaligned MBI: 0x%x", addr);
    return false;
  }

  return true;
}

void* find_multiboot_tag(multiboot_tag_t *tags, uint16_t type) {
  multiboot_tag_t *tag;

  for (
        tag = tags; // points to the first tag of the multiboot_info_t struct
        tag->type != MULTIBOOT_TAG_TYPE_END;
        tag = (multiboot_tag_t *) ((uint8_t *) tag + ((tag->size + 7) & ~7))
        ) {
    if (tag->type == type) {
      return tag;
    }
  }

  return 0;
}

reserved_areas_t read_multiboot_info(multiboot_info_t *mbi) {
  multiboot_tag_t *tag;
  reserved_areas_t reserved = {
    .kernel_start = -1,
    .kernel_end = 0,
    .multiboot_start = (uint64_t) mbi,
    .multiboot_end = 0
  };

    // kprintf("MBH announced MBI size 0x%x:\n", mbi->size);

  for (
    tag = (multiboot_tag_t *) mbi->tags;
    tag->type != MULTIBOOT_TAG_TYPE_END;
    tag = (multiboot_tag_t *) ((uint8_t *) tag + ((tag->size + 7) & ~7))
    ) {
    switch (tag->type) {
      case MULTIBOOT_TAG_TYPE_CMDLINE:
      kprintf("MBH command line = %s\n", ((multiboot_tag_string_t *) tag)->string);
      break;
      case MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME:
      kprintf("MBH loader name = %s\n", ((multiboot_tag_string_t *) tag)->string);
      break;
      case MULTIBOOT_TAG_TYPE_MODULE:
                // printf(
                //     "module at 0x%x-0x%x. command line %s\n",
                //     ((multiboot_tag_module_t *) tag)->mod_start,
                //     ((multiboot_tag_module_t *) tag)->mod_end,
                //     ((multiboot_tag_module_t *) tag)->cmdline
                // );
                // break;
      case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
      kprintf(
        "MBH mem_lower = %dKB, mem_upper = %dKB\n",
        ((multiboot_tag_basic_meminfo_t *) tag)->mem_lower,
        ((multiboot_tag_basic_meminfo_t *) tag)->mem_upper
        );
      break;
            // case MULTIBOOT_TAG_TYPE_BOOTDEV:
            //     printf(
            //         "boot device 0x%x,%u,%u\n",
            //         ((multiboot_tag_bootdev_t *) tag)->biosdev,
            //         ((multiboot_tag_bootdev_t *) tag)->slice,
            //         ((multiboot_tag_bootdev_t *) tag)->part
            //     );
            //     break;
      case MULTIBOOT_TAG_TYPE_MMAP:
      {
        multiboot_mmap_entry_t *mmap;
        for (
          mmap = ((multiboot_tag_mmap_t *) tag)->entries;
          (uint8_t *) mmap < (uint8_t *) tag + tag->size;
          mmap = (multiboot_mmap_entry_t *) ((unsigned long) mmap + ((multiboot_tag_mmap_t *) tag)->entry_size)
          ) {
          kprintf(
            "MBH mmap base_addr = 0x%X, length = 0x%X, type = 0x%x\n",
            mmap->addr,
            mmap->len,
            mmap->type
            );
      }
    }
    break;
            // case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
            //     kprintf("%s", "framebuffer\n");
            //     break;
            // case MULTIBOOT_TAG_TYPE_APM:
            //     kprintf("%s", "apm\n");
            //     break;
            // case MULTIBOOT_TAG_TYPE_ACPI_OLD:
            //     kprintf("%s", "acpi old\n");
            //     break;
            // case MULTIBOOT_TAG_TYPE_ACPI_NEW:
            //     kprintf("%s", "acpi new\n");
            //     break;
            case MULTIBOOT_TAG_TYPE_ELF_SECTIONS:
                {
                    multiboot_elf_sections_entry_t *elf;

                    uint32_t i;
                    for (
                        i = 0,
                        elf = ((multiboot_tag_elf_sections_t *) tag)->sections;
                        i < ((multiboot_tag_elf_sections_t *) tag)->num;
                        elf = (multiboot_elf_sections_entry_t *) ((uint64_t) elf + ((multiboot_tag_elf_sections_t *) tag)->section_size),
                        i++
                    ) {
                        kprintf(
                            "elf section #%d addr = 0x%X, type = 0x%X, size = 0x%X, flags = 0x%X\n",
                            i,
                            elf->addr,
                            elf->type,
                            elf->size,
                            elf->flags
                        );

                        if (elf->type == MULTIBOOT_ELF_SECTION_TYPE_NULL) {
                            continue;
                        }

                        if (((uint64_t) (elf->addr)) < reserved.kernel_start) {
                            reserved.kernel_start = (uint64_t) elf->addr;
                        }

                        if (((uint64_t) (elf->addr)) + elf->size > reserved.kernel_end) {
                            reserved.kernel_end = (uint64_t) elf->addr;
                            reserved.kernel_end += elf->size;
                        }
                    }
                }
                break;
            // case MULTIBOOT_TAG_TYPE_NETWORK:
            //     kprintf("%s", "network\n");
            //     break;
            // case MULTIBOOT_TAG_TYPE_LOAD_BASE_ADDR:
            //     kprintf("%s", "load base addr\n");
            //     break;
            // default:
            //     kprintf("unknwon tag 0x%x, size 0x%x\n", tag->type, tag->size);
    }
  }

  tag = (multiboot_tag_t *) ((uint8_t *) tag + ((tag->size + 7) & ~7));
  reserved.multiboot_end = (uint64_t) tag;
      // kprintf("total MBI size 0x%X\n", (uint64_t) tag - (uint64_t) mbi);

  return reserved;
}